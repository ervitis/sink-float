// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: sinkfleet.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterSinkFleetServiceClient is the client API for MasterSinkFleetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterSinkFleetServiceClient interface {
	Attack(ctx context.Context, in *AtomicMissile, opts ...grpc.CallOption) (*MissileResponse, error)
	CheckIsAlive(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Alive, error)
}

type masterSinkFleetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterSinkFleetServiceClient(cc grpc.ClientConnInterface) MasterSinkFleetServiceClient {
	return &masterSinkFleetServiceClient{cc}
}

func (c *masterSinkFleetServiceClient) Attack(ctx context.Context, in *AtomicMissile, opts ...grpc.CallOption) (*MissileResponse, error) {
	out := new(MissileResponse)
	err := c.cc.Invoke(ctx, "/proto.MasterSinkFleetService/Attack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterSinkFleetServiceClient) CheckIsAlive(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Alive, error) {
	out := new(Alive)
	err := c.cc.Invoke(ctx, "/proto.MasterSinkFleetService/CheckIsAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterSinkFleetServiceServer is the server API for MasterSinkFleetService service.
// All implementations should embed UnimplementedMasterSinkFleetServiceServer
// for forward compatibility
type MasterSinkFleetServiceServer interface {
	Attack(context.Context, *AtomicMissile) (*MissileResponse, error)
	CheckIsAlive(context.Context, *emptypb.Empty) (*Alive, error)
}

// UnimplementedMasterSinkFleetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMasterSinkFleetServiceServer struct {
}

func (UnimplementedMasterSinkFleetServiceServer) Attack(context.Context, *AtomicMissile) (*MissileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attack not implemented")
}
func (UnimplementedMasterSinkFleetServiceServer) CheckIsAlive(context.Context, *emptypb.Empty) (*Alive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsAlive not implemented")
}

// UnsafeMasterSinkFleetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterSinkFleetServiceServer will
// result in compilation errors.
type UnsafeMasterSinkFleetServiceServer interface {
	mustEmbedUnimplementedMasterSinkFleetServiceServer()
}

func RegisterMasterSinkFleetServiceServer(s grpc.ServiceRegistrar, srv MasterSinkFleetServiceServer) {
	s.RegisterService(&MasterSinkFleetService_ServiceDesc, srv)
}

func _MasterSinkFleetService_Attack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomicMissile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterSinkFleetServiceServer).Attack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MasterSinkFleetService/Attack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterSinkFleetServiceServer).Attack(ctx, req.(*AtomicMissile))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterSinkFleetService_CheckIsAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterSinkFleetServiceServer).CheckIsAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MasterSinkFleetService/CheckIsAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterSinkFleetServiceServer).CheckIsAlive(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterSinkFleetService_ServiceDesc is the grpc.ServiceDesc for MasterSinkFleetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterSinkFleetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MasterSinkFleetService",
	HandlerType: (*MasterSinkFleetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attack",
			Handler:    _MasterSinkFleetService_Attack_Handler,
		},
		{
			MethodName: "CheckIsAlive",
			Handler:    _MasterSinkFleetService_CheckIsAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sinkfleet.proto",
}

// ShipClientServiceClient is the client API for ShipClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShipClientServiceClient interface {
	SendClientKill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type shipClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShipClientServiceClient(cc grpc.ClientConnInterface) ShipClientServiceClient {
	return &shipClientServiceClient{cc}
}

func (c *shipClientServiceClient) SendClientKill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ShipClientService/SendClientKill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShipClientServiceServer is the server API for ShipClientService service.
// All implementations should embed UnimplementedShipClientServiceServer
// for forward compatibility
type ShipClientServiceServer interface {
	SendClientKill(context.Context, *KillRequest) (*emptypb.Empty, error)
}

// UnimplementedShipClientServiceServer should be embedded to have forward compatible implementations.
type UnimplementedShipClientServiceServer struct {
}

func (UnimplementedShipClientServiceServer) SendClientKill(context.Context, *KillRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendClientKill not implemented")
}

// UnsafeShipClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShipClientServiceServer will
// result in compilation errors.
type UnsafeShipClientServiceServer interface {
	mustEmbedUnimplementedShipClientServiceServer()
}

func RegisterShipClientServiceServer(s grpc.ServiceRegistrar, srv ShipClientServiceServer) {
	s.RegisterService(&ShipClientService_ServiceDesc, srv)
}

func _ShipClientService_SendClientKill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipClientServiceServer).SendClientKill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ShipClientService/SendClientKill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipClientServiceServer).SendClientKill(ctx, req.(*KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShipClientService_ServiceDesc is the grpc.ServiceDesc for ShipClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShipClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ShipClientService",
	HandlerType: (*ShipClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendClientKill",
			Handler:    _ShipClientService_SendClientKill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sinkfleet.proto",
}
