// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: sinkfleet.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SinkFleetServiceClient is the client API for SinkFleetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SinkFleetServiceClient interface {
	SendMissile(ctx context.Context, in *MissileRequest, opts ...grpc.CallOption) (*MissileResponse, error)
	SendKill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sinkFleetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSinkFleetServiceClient(cc grpc.ClientConnInterface) SinkFleetServiceClient {
	return &sinkFleetServiceClient{cc}
}

func (c *sinkFleetServiceClient) SendMissile(ctx context.Context, in *MissileRequest, opts ...grpc.CallOption) (*MissileResponse, error) {
	out := new(MissileResponse)
	err := c.cc.Invoke(ctx, "/proto.SinkFleetService/SendMissile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinkFleetServiceClient) SendKill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.SinkFleetService/SendKill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SinkFleetServiceServer is the server API for SinkFleetService service.
// All implementations should embed UnimplementedSinkFleetServiceServer
// for forward compatibility
type SinkFleetServiceServer interface {
	SendMissile(context.Context, *MissileRequest) (*MissileResponse, error)
	SendKill(context.Context, *KillRequest) (*emptypb.Empty, error)
}

// UnimplementedSinkFleetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSinkFleetServiceServer struct {
}

func (UnimplementedSinkFleetServiceServer) SendMissile(context.Context, *MissileRequest) (*MissileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMissile not implemented")
}
func (UnimplementedSinkFleetServiceServer) SendKill(context.Context, *KillRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKill not implemented")
}

// UnsafeSinkFleetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SinkFleetServiceServer will
// result in compilation errors.
type UnsafeSinkFleetServiceServer interface {
	mustEmbedUnimplementedSinkFleetServiceServer()
}

func RegisterSinkFleetServiceServer(s grpc.ServiceRegistrar, srv SinkFleetServiceServer) {
	s.RegisterService(&SinkFleetService_ServiceDesc, srv)
}

func _SinkFleetService_SendMissile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinkFleetServiceServer).SendMissile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SinkFleetService/SendMissile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinkFleetServiceServer).SendMissile(ctx, req.(*MissileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinkFleetService_SendKill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinkFleetServiceServer).SendKill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SinkFleetService/SendKill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinkFleetServiceServer).SendKill(ctx, req.(*KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SinkFleetService_ServiceDesc is the grpc.ServiceDesc for SinkFleetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SinkFleetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SinkFleetService",
	HandlerType: (*SinkFleetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMissile",
			Handler:    _SinkFleetService_SendMissile_Handler,
		},
		{
			MethodName: "SendKill",
			Handler:    _SinkFleetService_SendKill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sinkfleet.proto",
}
